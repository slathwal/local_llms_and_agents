---
title: "Graph basics in LangGraph"
author: "Shefali Lathwal"
date: "2025-04-25"
date-modified: last-modified
editor: visual
toc: true
format: html
jupyter: python_langchain
execute:
  freeze: auto
---

# The Simplest Graph

-   Nodes (Agent and Tools)
-   Edges (Simple, conditional)

## Define State

The first thing you do when you define a graph is to define a `State`. State is the object that we pass between the nodes and edges of our graph. The state schema serves as the input schema for all Nodes and Edges in the graph.

```{python}
from typing import TypedDict

# Define that state should be a dictionary with a single key - graph_state with values of type string
class State(TypedDict):
    graph_state: str
```

::: callout-note
TypedDict does not do checking of input during run. We need to do checking separately. If we want to do dynamic checking while running a cell, we need to use `BaseModel` from pydantic.
:::

## Define nodes

-   Nodes are just python functions

-   The first positional argument is the state.

-   Each node operates on the state.

-   By default, each node also overrides the previous state value.

```{python}
def node_1(state):
    print("---Node 1---")
    return {"graph_state": state["graph_state"]+"I am"}

def node_2(state):
    print("---Node 2---")
    return {"graph_state": state["graph_state"]+" happy!"}

def node_3(state):
    print("---Node 3---")
    return {"graph_state": state["graph_state"]+" sad!"}



```

## Define Edges

Edges connect the nodes.

-   Normal edges are used if you want to go from one node to the next.

-   Conditional edges are used when you want to optionally route between nodes.

-   Conditional edge is implemented as a function that returns the next node to visit based on some logic.

```{python}
import random
from typing import Literal # Literal is used for restricting a value to a fixed set of constants

def decide_mood(state) -> Literal["node_2", "node_3"]:

    # Often, we will use state to decide on the next node to visit
    # We are not doing anything with the current state right now.
    user_input = state["graph_state"]

    # Here, we are just doing a 50/50 split
    if random.random()<0.5:
        return "node_2"
    
    return "node_3"
```

## Construct the graph

-   Now we will build a graph from our components - nodes and edges.

-   The `StateGraph` class is the one we will use.

-   First we initialize a `StateGraph` with the `State` class we had defined.

-   Then, we will add our nodes and edges.

-   We use the START node, a special node that sends user input to the graph, to indicate where to start our graph.

-   We use END node, which is a special node, to indicate end of the graph.

-   We will compile our graph to check the structure of our graph.

-   We will then visualize the graph.

```{python}
from IPython.display import Image, display
from langgraph.graph import StateGraph, START, END

# Build graph
builder = StateGraph(State)
builder.add_node("node_1", node_1)
builder.add_node("node_2", node_2)
builder.add_node("node_3", node_3)

builder.add_edge(START, "node_1")
builder.add_conditional_edges("node_1", decide_mood)
builder.add_edge("node_2", END)
builder.add_edge("node_3", END)

# Compile the graph
graph = builder.compile()

# View the graph
display(Image(graph.get_graph().draw_mermaid_png()))
```

# Implement/Invoke a graph

-   The compiled graph implements the `runnable` protocol.

-   This provides a standard way to execute LangChain components.

-   `invoke` is one of the standard methods in this interface.

-   The input to our SimpleGraph is a dictionary with one key "graph_state", which sets the initial value of the graph_state.

-   When invoke is called, the graph starts execution from the `START` node.

-   Each node function receives the current state and overrides it.

-   The execution continues until it reaches the `END` node.

```{python}
graph.invoke({"graph_state": "Hi, this is Lance."})
```

-   `invoke` runs the entire graph synchronously.

-   it waits for each step to complete before moving to the next.

-   It returns the final state of the graph after all nodes have executed.

-   In the case of SimpleGraph, it would return the state after `node_3` has completed.